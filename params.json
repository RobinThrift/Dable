{"name":"Dable","tagline":"Dable (pronounced 'dabble') is a simple javascript table control with filtering, sorting, paging, styles, and more!","body":"Dable\r\n=====\r\n\r\nDable (pronounced 'dabble') is a simple javascript table control with filtering, sorting, paging, styles, and more!\r\n\r\nDable is simple and elegant.  It has _zero_ dependencies and works in IE8+.\r\n\r\nInitialize a new Dable with\r\n\r\n```javascript\r\nvar dable = new Dable();\r\n```\r\nBuild your Dable by giving it data and column names.\r\n\r\n```javascript\r\nvar data = [ [ 1, 2 ], [ 3, 4 ] ];\r\nvar columns = [ 'Odd', 'Even' ];\r\n\r\ndable.SetDataAsRows(data);\t\t// We can import data as rows or columns for flexibility\r\ndable.SetColumnNames(columns);\t// Because the data is raw, we need to name our columns\r\n```\r\nIf you want to style your Dable, you can use custom styling with easy to remember classes and IDs.\r\nOr you can just select JQueryUI or Bootstrap for preconfigured styles.\r\n\r\n```javascript\r\ndable.style = \"JqueryUI\";\t// Don't worry about uppercase/lowercase\r\n```\r\nDable is pure javascript, so you don't have to add a CSS file to your project.  However, if you use a custom style, make sure you include the relevant stylesheet.\r\n\r\nCreating your Dable is as simple as using the id of a div from your page and calling\r\n\r\n```javascript\r\ndable.BuildAll(divId);\r\n```\r\n__Everything in Dable is designed to be modifiable by you.__\r\n\r\nThe Search is an array of callbacks, so you can add your own with a simple command.\r\n\r\n```javascript\r\ndable.filters.push(function (searchText, cellValue) {\r\n\t//this is a custom filter\r\n});\r\n```\r\nBecause it's a simple array, you can wipe out the existing filters altogether if you don't like them.\r\nYour columns are a simple object array.  Each object has a Tag, a FriendlyName, and can be provided with CustomRendering and CustomSortFunc callbacks\r\n\r\n```javascript\r\n{ Tag, FriendlyName, CustomSortFunc, CustomRendering }\r\n```\r\nThese callbacks are simple to use too.  When you want to render something uniquely, just return the text to render and it'll be stuck in the cell.\r\n\r\n```javascript\r\ndable.columnData[0].CustomSortFunc = function (cellValue) {\r\n\treturn '<a target=\"_blank\" href=\"/?cell=' + cellValue + '\">' + cellValue + '</a>';\r\n}\r\n```\r\nWhen you want to sort something uniquely, just return an array of the rows to present in whatever order you want.\r\n\r\n```javascript\r\ndable.columnData[1].CustomSortFunc = function (columnIndex, ascending, currentRows) {\r\n\treturn currentRows.reverse();\r\n}\r\n```\r\nWhat about printing?  If your table is paged, you need to be able to output all the rows to print!\r\nHere's a sample of how to do this extremely complex Dable procedure.\r\n\r\n```javascript\r\ndable.pageNumber = 0;\t\t\t\t// Go back to the first page\r\ndable.pageSize = dable.rows.length;\t// Change the page size to the whole table size\r\ndable.UpdateDisplayedRows();\t\t// Update the table\r\ndable.UpdateStyle();\t\t\t\t// Reapply our styles\r\n```\r\n\r\nEvery function inside of Dable is accessible, down to the initial rendering functions!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}